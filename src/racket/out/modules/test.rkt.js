import * as $rjs_core from '../runtime/core.js';import * as M0 from "../links/racketscript-compiler/racketscript/private/interop.rkt.js";import * as M1 from "../runtime/kernel.rkt.js";import * as M2 from "../collects/racket/private/for.rkt.js";import memwatch from "memwatch-next";var obj_assign = global.Object.assign;var console = global.console;var JSON = global.JSON;var record = function(cnt1, f2) {memwatch.gc();var hd3 = new memwatch.HeapDiff;var arr4 = [];var start5 = 0;var end6 = cnt1;var inc7 = 1;if (M1.real_p(start5)) {if (M1.real_p(end6)) {var if_res1 = M1.real_p(inc7);} else {var if_res1 = false;}var if_res2 = if_res1;} else {var if_res2 = false;}if (if_res2) {var if_res3 = M1.rvoid();} else {var if_res3 = M2.__rjs_quoted__.in_range(start5,end6,inc7);}if_res3;var for_loop8 = function(pos9) {if (M1._lt_(pos9,end6)) {var i10 = pos9;if (true) {arr4.push(f2());var let_result4 = M1.values();var let_result5 = M1.values();if (true) {var if_res6 = M1.not(false);} else {var if_res6 = false;}if (if_res6) {var if_res7 = for_loop8(pos9+inc7);} else {var if_res7 = M1.values();}var if_res8 = if_res7;} else {var if_res8 = M1.values();}var if_res9 = if_res8;} else {var if_res9 = M1.values();}return if_res9;};for_loop8(start5);M1.rvoid();var diff11 = hd3.end();return diff11.change.size_bytes/cnt1;};var fill_hash = function(cnt12, obj13) {var start14 = 0;var end15 = cnt12;var inc16 = 1;if (M1.real_p(start14)) {if (M1.real_p(end15)) {var if_res10 = M1.real_p(inc16);} else {var if_res10 = false;}var if_res11 = if_res10;} else {var if_res11 = false;}if (if_res11) {var if_res12 = M1.rvoid();} else {var if_res12 = M2.__rjs_quoted__.in_range(start14,end15,inc16);}if_res12;var for_loop17 = function(pos18) {if (M1._lt_(pos18,end15)) {var i19 = pos18;if (true) {obj13 = M1.hash_set(obj13,M1.string_append("key-",M1.number__gt_string(i19),0));var let_result13 = M1.values();var let_result14 = M1.values();if (true) {var if_res15 = M1.not(false);} else {var if_res15 = false;}if (if_res15) {var if_res16 = for_loop17(pos18+inc16);} else {var if_res16 = M1.values();}var if_res17 = if_res16;} else {var if_res17 = M1.values();}var if_res18 = if_res17;} else {var if_res18 = M1.values();}return if_res18;};for_loop17(start14);M1.rvoid();return obj13;};var fill_list = function(cnt20, obj21) {var start22 = 0;var end23 = cnt20;var inc24 = 1;if (M1.real_p(start22)) {if (M1.real_p(end23)) {var if_res19 = M1.real_p(inc24);} else {var if_res19 = false;}var if_res20 = if_res19;} else {var if_res20 = false;}if (if_res20) {var if_res21 = M1.rvoid();} else {var if_res21 = M2.__rjs_quoted__.in_range(start22,end23,inc24);}if_res21;var for_loop25 = function(pos26) {if (M1._lt_(pos26,end23)) {var i27 = pos26;if (true) {obj21 = M1.cons(0,obj21);var let_result22 = M1.values();var let_result23 = M1.values();if (true) {var if_res24 = M1.not(false);} else {var if_res24 = false;}if (if_res24) {var if_res25 = for_loop25(pos26+inc24);} else {var if_res25 = M1.values();}var if_res26 = if_res25;} else {var if_res26 = M1.values();}var if_res27 = if_res26;} else {var if_res27 = M1.values();}return if_res27;};for_loop25(start22);M1.rvoid();return obj21;};var results = {};results = obj_assign(results,{"empty vector":record(1000,function() {return M1.vector();})});results = obj_assign(results,{"empty hash map":record(1000,function() {return M1.hash();})});results = obj_assign(results,{"empty list":record(1000,function() {return M1.list();})});results = obj_assign(results,{"10 item vector":record(1000,function() {return M1.make_vector(10,0);})});results = obj_assign(results,{"10 item hash map":record(1000,function() {return fill_hash(10,M1.hash());})});results = obj_assign(results,{"10 item list":record(1000,function() {return fill_list(10,M1.list());})});results = obj_assign(results,{"100 item vector":record(1000,function() {return M1.make_vector(100,0);})});results = obj_assign(results,{"100 item hash map":record(1000,function() {return fill_hash(100,M1.hash());})});results = obj_assign(results,{"100 item list":record(1000,function() {return fill_list(100,M1.list());})});results = obj_assign(results,{"1000 item vector":record(1000,function() {return M1.make_vector(1000,0);})});results = obj_assign(results,{"1000 item hash map":record(1000,function() {return fill_hash(1000,M1.hash());})});results = obj_assign(results,{"1000 item list":record(1000,function() {return fill_list(1000,M1.list());})});console.log(JSON.stringify(results));var __rjs_quoted__ = {};export { __rjs_quoted__ };