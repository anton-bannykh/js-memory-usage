// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

var List         = require("bs-platform/lib/js/list.js");
var $$Array      = require("bs-platform/lib/js/array.js");
var Curry        = require("bs-platform/lib/js/curry.js");
var Hashtbl      = require("bs-platform/lib/js/hashtbl.js");
var Caml_array   = require("bs-platform/lib/js/caml_array.js");
var Caml_int32   = require("bs-platform/lib/js/caml_int32.js");
var Pervasives   = require("bs-platform/lib/js/pervasives.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Memwatch     = require("memwatch-next");

function recordHashtbl(cnt, f) {
  Memwatch.gc();
  var hd = new Memwatch.HeapDiff();
  var arr = $$Array.map((function () {
          return Curry._1(f, /* () */0);
        }), Caml_array.caml_make_vect(1000, Hashtbl.create(/* None */0, 0)));
  var diff = hd.end();
  global.name = arr.length;
  return Caml_int32.div(diff.change.size_bytes, cnt);
}

function recordList(cnt, f) {
  Memwatch.gc();
  var hd = new Memwatch.HeapDiff();
  var arr = $$Array.map((function () {
          return Curry._1(f, /* () */0);
        }), Caml_array.caml_make_vect(1000, /* [] */0));
  var diff = hd.end();
  global.name = arr.length;
  return Caml_int32.div(diff.change.size_bytes, cnt);
}

function recordArr(cnt, f) {
  Memwatch.gc();
  var hd = new Memwatch.HeapDiff();
  var arr = $$Array.map((function () {
          return Curry._1(f, /* () */0);
        }), Caml_array.caml_make_vect(1000, /* array */[]));
  var diff = hd.end();
  global.name = arr.length;
  return Caml_int32.div(diff.change.size_bytes, cnt);
}

function fillHashtbl(_cnt, obj) {
  while(true) {
    var cnt = _cnt;
    if (cnt > 0) {
      Hashtbl.add(obj, "key-" + Pervasives.string_of_int(cnt), 0);
      _cnt = cnt - 1 | 0;
      continue ;
      
    } else {
      return obj;
    }
  };
}

function fillArr(_from, cnt, obj) {
  while(true) {
    var from = _from;
    if (from < cnt) {
      Caml_array.caml_array_set(obj, from, 0);
      _from = from + 1 | 0;
      continue ;
      
    } else {
      return obj;
    }
  };
}

function fillList(_cnt, _obj) {
  while(true) {
    var obj = _obj;
    var cnt = _cnt;
    if (cnt > 0) {
      _obj = List.append(/* :: */[
            0,
            /* [] */0
          ], obj);
      _cnt = cnt - 1 | 0;
      continue ;
      
    } else {
      return obj;
    }
  };
}

var results = {
  "empty List": recordList(1000, (function () {
          return /* [] */0;
        })),
  "empty Array": recordArr(1000, (function () {
          return Caml_array.caml_make_vect(0, 0);
        })),
  "empty Hashtbl": recordHashtbl(1000, (function () {
          return Hashtbl.create(/* None */0, 0);
        })),
  "10 item List": recordList(1000, (function () {
          return fillList(10, /* [] */0);
        })),
  "10 item Array": recordArr(1000, (function () {
          return fillArr(0, 10, Caml_array.caml_make_vect(10, 0));
        })),
  "10 item Hashtbl": recordHashtbl(1000, (function () {
          return fillHashtbl(10, Hashtbl.create(/* None */0, 0));
        })),
  "100 item List": recordList(1000, (function () {
          return fillList(100, /* [] */0);
        })),
  "100 item Array": recordArr(1000, (function () {
          return fillArr(0, 100, Caml_array.caml_make_vect(100, 0));
        })),
  "100 item Hashtbl": recordHashtbl(1000, (function () {
          return fillHashtbl(100, Hashtbl.create(/* None */0, 0));
        })),
  "1000 item List": recordList(1000, (function () {
          return fillList(1000, /* [] */0);
        })),
  "1000 item Array": recordArr(1000, (function () {
          return fillArr(0, 1000, Caml_array.caml_make_vect(1000, 0));
        })),
  "1000 item Hashtbl": recordHashtbl(1000, (function () {
          return fillHashtbl(1000, Hashtbl.create(/* None */0, 0));
        }))
};

console.log(Js_primitive.undefined_to_opt(JSON.stringify(results)));

exports.recordHashtbl = recordHashtbl;
exports.recordList    = recordList;
exports.recordArr     = recordArr;
exports.fillHashtbl   = fillHashtbl;
exports.fillArr       = fillArr;
exports.fillList      = fillList;
exports.results       = results;
/* results Not a pure module */
